clear
clc
warning('off')

% Define the start and goal positions
start = [0, 0];
goal = [10,10];

test_u = [0, 0];
test_v = [7, 4];

vi = [7,8];
vj = [4,1];

obs1 = [0, 0; 1.5,0; 1.5,1; 0,1;];
obs1_2_base = [0,0; 5,0; 5,0.6; 0,0.6;];
obs1_2 = obs1_2_base + [3,5.2];
obs2 = obs1 + [2,0];
obs3 = obs1 + [4,0];
obs4 = obs1 + [6,0];
obs5 = obs1 + [8,0];
obs6 = obs1 + [10,0];

obs7 = obs1 + [0,2];
obs8 = obs1 + [2,2];
obs9 = obs1 + [4,2];
obs10 = obs1 + [6,2];
obs11 = obs1 + [8,2];
obs12 = obs1 + [10,2];

obs13 = obs1 + [0,4];
obs14 = obs1 + [2,4];
obs15 = obs1 + [4,4];
obs16 = obs1 + [6,4];
obs17 = obs1 + [8,4];
obs18 = obs1 + [10,4];

obs19 = obs1 + [0,6];
obs20 = obs1 + [2,6];
obs21 = obs1 + [4,6];
obs22 = obs1 + [6,6];
obs23 = obs1 + [8,6];
obs24 = obs1 + [10,6];

obs25 = obs1 + [0,8];
obs26 = obs1 + [2,8];
obs27 = obs1 + [4,8];
obs28 = obs1 + [6,8];
obs29 = obs1 + [8,8];
obs30 = obs1 + [10,8];

set = 8;

% Define the polygonal obstacles as a cell array of vertices
obstacles_set1 = {

        [8, 8; 12.5,8; 12.5,9; 8,9;],...
        [1, 1.5; 2, 1.5; 2, 2.5; 1, 2.5;], ...
        [3, 0.5; 4, 0.5; 4, 1.5; 3, 1.5], ...
        [3,5; 5,4; 7.5,5; 6, 10; 5, 6;4, 8;], ...
        [6.5, 9.25; 7.5,9.25; 7.5,10.8; 6.5,10.8;], ...
    };

obstacles_set2 = {

        [8, 8; 12.5,8; 12.5,9; 8,9;],...
        [1, 1.5; 2, 1.5; 2, 2.5; 1, 2.5;], ...
        [3, 0.5; 4, 0.5; 4, 1.5; 3, 1.5], ...
        [3,5; 8,0; 7.5,5; 6, 10; 5, 6;4, 8;], ...
        [6.5, 9.25; 7.5,9.25; 7.5,10.8; 6.5,10.8;], ...
    };

obstacles_set3 = {

        [8, 8; 12.5,8; 12.5,9; 8,9;],...
        [1, 0.5; 2, 0.5; 2, 1.5; 1, 1.5;], ...
        [3, 0.5; 4, 0.5; 4, 1.5; 3, 1.5], ...
        [3,5; 5,4; 7.5,5; 6, 10; 5, 6;4, 8;], ...
        [6.5, 9.25; 7.5,9.25; 7.5,10.8; 6.5,10.8;], ...
    };

obstacles_set4 = {

        [8, 8; 12.5,8; 12.5,9; 8,9;],...
        [1, 0.5; 2, 0.5; 2, 1.5; 1, 1.5;], ...
        [3, 0.5; 4, 0.5; 4, 3.5; 3, 3.5], ...
        [3,5; 5,4; 7.5,5; 6, 10; 5, 6;4, 8;], ...
        [6.5, 9.25; 7.5,9.25; 7.5,10.8; 6.5,10.8;], ...
    };

obstacles_set5 = {
        [1, 0.5; 2, 0.5; 2, 1.5; 1, 1.5;], ...
        [2.1, -1; 2.5, -1; 2.5, 5.5; 2.1, 5.5;], ...
        [3,5; 5,4; 7.5,5; 6, 10; 5, 6;4, 8;], ...
        [3, -0.5; 4, -0.5; 4, 3.5; 3, 3.5;], ...
        [8, 8; 12.5,8; 12.5,9; 8,9;],...
        [6.5, 9.25; 7.5,9.25; 7.5,10.8; 6.5,10.8;], ...
    };

obstacles_set6 = {
        [1, 0.5; 2, 0.5; 2, 1.5; 1, 1.5;], ...
        [2.1, 0.5; 2.5, 0.5; 2.5, 5.5; 2.1, 5.5;], ...
        [3,5; 5,4; 7.5,5; 6, 10; 5, 6;4, 8;], ...
        [3, 0.5; 4, 0.5; 4, 3.5; 3, 3.5;], ...
        [8, 8; 12.5,8; 12.5,9; 8,9;],...
        [6.5, 9.25; 7.5,9.25; 7.5,10.8; 6.5,10.8;], ...
    };

obstacles_set7 = {
    obs2,...
    obs3,...
    obs4,...
    obs5,...
    obs6,...
    obs7,...
    obs8,...
    obs9,...
    obs10,...
    obs11,...
    obs12,...
    obs13,...
    obs14,...
    obs15,...
    obs16,...
    obs17,...
    obs18,...
    obs19,...
    obs20,...
    obs21,...
    obs22,...
    obs23,...
    obs24,...
    obs25,...
    obs26,...
    obs27,...
    obs28,...
    obs29,...
    obs30,...
    obs1_2,...
};

obstacles_set8 = {
    obs2,...
    obs4,...
    obs6,...
    obs8,...
    obs10,...
    obs12,...
    obs14,...
    obs16,...
    obs18,...
    obs20,...
    obs22,...
    obs24,...
    obs26,...
    obs28,...
    obs30,...
    obs1_2,...
};

if (set == 1)
    obs = obstacles_set1;
elseif (set == 2)
    obs = obstacles_set2;
elseif (set == 3)
    obs = obstacles_set3;
elseif (set == 4)
    obs = obstacles_set4;
elseif (set == 5)
    obs = obstacles_set5;
elseif (set == 6)
    obs = obstacles_set6;
elseif (set == 7)
    obs = obstacles_set7;
elseif (set == 8)
    obs = obstacles_set8;
end

[path,G] = minimalConstruct(obs, start, goal);

num_edges = size(G.Edges);


% Plot the results
figure;
hold on;
for i=1:num_edges(1)
    x_y_1 = str2num(G.Edges{i,1}{1});
    x_y_2 = str2num(G.Edges{i,1}{2});
    plot([x_y_1(1) x_y_2(1)],[x_y_1(2) x_y_2(2)],'-o');
end
plot(start(1), start(2), 'r*')
plot(goal(1), goal(2), 'g*')
plot([start(1), goal(1)], [start(2), goal(2)], 'b--', 'LineWidth', 2)

for i = 1:numel(obs)
    patch(obs{i}(:,1), obs{i}(:,2), 'k');
end

if ~isempty(path)
    plot(path(:,1), path(:,2), 'r', 'LineWidth', 2);
end
xlim([-1, 11]);
ylim([-1, 11]);

axis equal;